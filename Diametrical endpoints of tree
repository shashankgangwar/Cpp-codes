>>Nodes are 1-indexed, graph is undirected and unweightted.

Find a vector ans, such that: 
>>ans[i] is 1 if (i+1)th node is an endpoint of any diameter of the tree.



#include<bits/stdc++.h>
using namespace std;


void dfs(int i, int d, int& maxd, int& maxNode, vector<vector<int> >& A, vector<int>& vis){
	vis[i]=1;
	if(d>maxd){
		maxd=d;
		maxNode=i;
	}
	
	
	for(int j: A[i]){
		if(vis[j]==0) dfs(j,d+1,maxd,maxNode,A,vis);
	}
}


void dfs2(int i, int d, vector<vector<int> >& A, vector<int>& vis, int maxd, vector<int>& ans){
	vis[i]=1;
	for(int j: A[i]){
		if(vis[j]==0) dfs2(j,d+1,A,vis,maxd,ans);
	}
	if(d==maxd) ans[i-1]=1;
}


vector<int> solve(int n, vector<int> tf, vector<int> tt){
	
	vector<vector<int> > A(n+1,vector<int>());
	vector<int> vis(n+1,0);
	vector<int> ans(n);
	int maxd=-1,maxNode=-1;
	
	for(int i=0;i<n-1;i++){
		A[tf[i]].push_back(tt[i]);
		A[tt[i]].push_back(tf[i]);
	}
	
	dfs(1,0,maxd,maxNode,A,vis);
	int f_endpoint=maxNode;
	
	maxd=-1;
	vis=vector<int>(n+1,0);
	dfs(f_endpoint,0,maxd,maxNode,A,vis);
	int s_endpoint=maxNode;
	
	vis=vector<int>(n+1,0);
	dfs2(f_endpoint, 0, A, vis, maxd, ans);
	
	vis=vector<int>(n+1,0);
	dfs2(s_endpoint, 0, A, vis, maxd, ans);
	
	return ans;
	
}

int main(){
	vector<int> ans= solve(7,{1,2,3,3,1,1},{2,3,4,5,6,7});
	for(int i=0;i<ans.size();i++) cout<<ans[i]<<" ";
}
