Leetcode: 1000 https://leetcode.com/problems/minimum-cost-to-merge-stones/submissions/

int mergeStones(vector<int>& A, int k) {
        int n=A.size();
        if((n-1)%(k-1)!=0) return -1;
        vector<vector<vector<int> > > dp(n,vector<vector<int> >(n,vector<int>(k+1,-1)));
        int ans=solve(A,k,0,n-1,dp,1);
        if(ans>=INT_MAX) return -1;
        return ans;
        
    }
    int solve(vector<int>& A, int k, int i, int j, vector<vector<vector<int> > >& dp, int piles){
        int len=j-i+1;
        if(len==1){
            if(piles==1)return 0;
            return INT_MAX;
        }
        if(piles>len) return INT_MAX;
        //if(k==1 || (len-1)%(k-1)!=0) return INT_MAX;
        
        if(dp[i][j][piles]!=-1) return dp[i][j][piles];
        
        int sum=0;
        for(int x=i;x<=j;x++) sum+=A[x];
        
        if(piles==1){
            int ans=solve(A,k,i,j,dp,k);
            if(ans!=INT_MAX) ans+=sum;
            dp[i][j][piles]=ans;
        }
        else{
            int ans=INT_MAX;
            for(int x=i;x<j;x++){
                int a=solve(A,k,i,x,dp,1);
                if(a==INT_MAX) continue;
                int b=solve(A,k,x+1,j,dp,piles-1);
                if(b==INT_MAX) continue;
                ans=min(ans,a+b);
            }
            dp[i][j][piles]=ans;
           
        }
         return dp[i][j][piles];
    }
