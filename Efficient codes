


1. Find Kth element after merging two sorted arrays of different sizes in O(logn + logm):
2. Find median of two sorted arrays. (same or different sizes)
3. Find the middle element after meging two arrays.

>>>All of the above three questions can be solved using following divide and conquer code.


int solve(const vector<int>& A, const vector<int>& B, int i1, int j1, int i2, int j2, int k)
{
    if (i1 > j1)
        return B[i2+k-1];
    if (i2 > j2)
        return A[i1+k-1];
        
        
    int mid1 = (i1 + j1) / 2;
    int mid2 = (i2 + j2) / 2;
    if (mid1-i1 + mid2-i2 +2  < k)
    {
        if (A[mid1] > B[mid2])
            return solve(A, B, i1, j1, mid2+1, j2, k - (mid2-i2+1));
        else
            return solve(A, B, mid1+1, j1, i2, j2, k - (mid1-i1+1));
    }
    else if (mid1-i1 + mid2-i2 +2  > k)
    {
        if (A[mid1] > B[mid2])
            return solve(A, B, i1,  mid1-1, i2, j2, k);
        else
            return solve(A, B, i1, j1, i2, mid2-1, k);
    }
    else{
        if(A[mid1]>B[mid2]){
            if(mid2==j2 || B[mid2+1]>=A[mid1]) return A[mid1];
            else{
                return solve(A, B, i1,  mid1-1, i2, j2, k);
            }
        }
        else if(A[mid1]<B[mid2]){
            if(mid1==j1 || A[mid1+1]>=B[mid2]) return B[mid2];
            else return solve(A, B, i1, j1, i2, mid2-1, k);
        }
        else{
            return A[mid1];
        }
    }
}



**5. Find the element in rotated sorted array:**
  int search(int A[], int l, int h, int k){
    //complete the function here
        int s=l,e=h;
        int ls=0,rs=0;
        if(A[0]==k) return l;
        if(A[h]==k) return h;
        if(A[0]<k) ls=1;
        else if(A[h]>k) rs=1;
        else return -1;
        while(l<=h){
            int m=(l+h)/2;
            int lsm=0,rsm=0;
            if(A[m]==k) return m;
            
            
            if(A[m]<=A[e] && A[m]<A[s]) rsm=1;
            else lsm=1;
            
            if(ls==1 && lsm==1){
                if(A[m]>k) h=m-1;
                else if(A[m]<k) l=m+1;
            }
            else if(rs==1 && rsm==1){
                if(A[m]>k) h=m-1;
                else if(A[m]<k) l=m+1;
            }
            else if(ls==1 && rsm==1){
                h=m-1;
            }
            else if(rs==1 && lsm==1){
                l=m+1;
            }
        }
        return -1;
    }
    
    >> can also be solved by finding the least element and then applying the binary search in both parts.





